
# **Local Run Setup Instructions**

---

### **Table of Contents**
1. [Prerequisites](#prerequisites)
2. [Cloning the Repository](#cloning-the-repository)
3. [AWS Credentials Setup](#aws-credentials-setup)
4. [NodeMCU Configuration](#nodemcu-configuration)
5. [Running the Program](#running-the-program)
6. [Accessing Collected Data](#accessing-collected-data)
7. [Troubleshooting](#troubleshooting)

---

## **1. Prerequisites**

Before running the program locally, ensure that you have the following prerequisites installed and ready:

- **Python 3.x** (for running scripts)
- **Git** (for cloning the repository)
- **NodeMCU** (already configured for data collection)
- **AWS CLI** (optional, for manual access to AWS services)
- **Access to our AWS credentials** (you'll need to contact us for IAM access)

---

## **2. Cloning the Repository**

To get started, you need to clone the GitHub repository to your local machine. Run the following commands in your terminal or command prompt:

```bash
# Clone the repository
git clone https://github.com/YourRepoName/Drone-Pollution-Monitoring.git

# Change to the repository directory
cd Drone-Pollution-Monitoring
```

---

## **3. AWS Credentials Setup**

In order to access the AWS database where sensor data is stored, you need to have IAM credentials with appropriate permissions. Please **contact us** to get your IAM user set up.

Once you have received your AWS credentials, follow these steps to set them up locally:

1. Open a terminal/command prompt.
2. Use the following command to configure AWS credentials:

```bash
aws configure
```

You'll be prompted to enter:

- **AWS Access Key ID**
- **AWS Secret Access Key**
- **Default region** (Choose the region your AWS services are hosted in)
- **Output format** (Leave as default or type `json`)

After configuring, youâ€™ll have access to the AWS data needed by the application.

---

## **4. NodeMCU Configuration**

Ensure your **NodeMCU** is already set up and connected to the sensors. The NodeMCU is responsible for gathering data from the **GP2Y** and **BME680** sensors and uploading this data to the **AWS database**.

If you haven't configured NodeMCU yet, follow these basic steps:

1. Flash your NodeMCU with the firmware provided in the repository (`nodemcu-firmware.ino`).
2. Configure the NodeMCU to connect to your Wi-Fi network for internet access.
3. Verify that the NodeMCU uploads data to AWS in real-time.

---

## **5. Running the Program**

Once everything is configured and the repository is cloned, you can run the program locally. The program fetches data from the AWS server in real-time and visualizes it.

1. **Install required Python packages**:
   
   Ensure you're in the project directory and run:

   ```bash
   pip install -r requirements.txt
   ```

2. **Run the main script**:

   ```bash
   python app.py
   ```

3. This will start fetching data from AWS and processing it for display on your local machine.

---

## **6. Accessing Collected Data**

The data collected by the **GP2Y** and **BME680** sensors is uploaded to AWS. You can access this data in two ways:

- **Via the Web Interface**: The program also offers a website where data is visualized in real-time. Once the program is running, navigate to `http://localhost:5000` in your web browser to see the interactive charts and maps.
  
- **Via AWS Database**: You can directly query the data stored in AWS by connecting through the **AWS Management Console** or using the **AWS CLI**.

---

## **7. Troubleshooting**

- **Problem**: Cannot access AWS services.
  - **Solution**: Ensure your AWS credentials are properly configured. Use `aws configure` to set them up.

- **Problem**: Data is not being uploaded to AWS.
  - **Solution**: Verify that the NodeMCU is correctly set up and has internet access. Check the Wi-Fi configuration and ensure the sensor data is being uploaded to AWS.

- **Problem**: Web interface not loading.
  - **Solution**: Ensure the `app.py` is running without errors and check if the local server is active at `http://localhost:5000`.

---

For any further assistance or credentials requests, please reach out to the project maintainers via email or through the GitHub repository issues section.
